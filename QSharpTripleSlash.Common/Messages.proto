/* ========================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */

syntax = "proto3";
package QSharpTripleSlash.Common;


// This is used to determine the type of message being sent over the IPC channel.
enum MessageType
{
	// An unknown / uninitialized message
	MessageType_Unknown = 0;

	// An error message, used when something went wrong during a request
	MessageType_Error = 1;

	// A request to process a method signature
	MessageType_MethodSignatureRequest = 2;

	// A processed method signature response
	MessageType_MethodSignatureResponse = 3;
}


// This is a generic message wrapper, used to contain a message and specify its type
message Message
{
	// The type of the message that's wrapped by this one
	MessageType Type = 1;
	
	// The encoded (wrapped) protobuf message
	bytes MessageBody = 2;
}


// This is an error message, used to describe an error during a request
message ErrorMessage
{
	// The .NET type of the exception that caused the error
	string ErrorType = 1;

	// The exception message string
	string Message = 2;

	// The stack trace from the exception
	string StackTrace = 3;
}


// This is a request message for processing a Q# method signature
message MethodSignatureRequest
{
	string MethodSignature = 1;
}


// This message is used to wrap the signature of a function or operation in Q# for documentation
// generation. It contains everything needed to autogenerate Markdown for the method.
message MethodSignatureResponse
{
	// The name of the method
	string Name = 1;

	// The names of each of the parameters
	repeated string ParameterNames = 2;

	// True if it returns something, false if it returns Unit (so the output section can be ignored).
	bool HasReturnType = 3;
}
