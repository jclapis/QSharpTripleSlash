// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QSharpTripleSlash.Common {

  /// <summary>Holder for reflection information generated from Messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for Messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NZXNzYWdlcy5wcm90bxIYUVNoYXJwVHJpcGxlU2xhc2guQ29tbW9uIlMK",
            "B01lc3NhZ2USMwoEVHlwZRgBIAEoDjIlLlFTaGFycFRyaXBsZVNsYXNoLkNv",
            "bW1vbi5NZXNzYWdlVHlwZRITCgtNZXNzYWdlQm9keRgCIAEoDCI/CgVFcnJv",
            "chIRCglFcnJvclR5cGUYASABKAkSDwoHTWVzc2FnZRgCIAEoCRISCgpTdGFj",
            "a1RyYWNlGAMgASgJIjEKFk1ldGhvZFNpZ25hdHVyZVJlcXVlc3QSFwoPTWV0",
            "aG9kU2lnbmF0dXJlGAEgASgJInIKF01ldGhvZFNpZ25hdHVyZVJlc3BvbnNl",
            "EgwKBE5hbWUYASABKAkSFgoOUGFyYW1ldGVyTmFtZXMYAiADKAkSGgoSVHlw",
            "ZVBhcmFtZXRlck5hbWVzGAMgAygJEhUKDUhhc1JldHVyblR5cGUYBCABKAgq",
            "jgEKC01lc3NhZ2VUeXBlEhcKE01lc3NhZ2VUeXBlX1Vua25vd24QABIVChFN",
            "ZXNzYWdlVHlwZV9FcnJvchABEiYKIk1lc3NhZ2VUeXBlX01ldGhvZFNpZ25h",
            "dHVyZVJlcXVlc3QQAhInCiNNZXNzYWdlVHlwZV9NZXRob2RTaWduYXR1cmVS",
            "ZXNwb25zZRADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::QSharpTripleSlash.Common.MessageType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QSharpTripleSlash.Common.Message), global::QSharpTripleSlash.Common.Message.Parser, new[]{ "Type", "MessageBody" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QSharpTripleSlash.Common.Error), global::QSharpTripleSlash.Common.Error.Parser, new[]{ "ErrorType", "Message", "StackTrace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QSharpTripleSlash.Common.MethodSignatureRequest), global::QSharpTripleSlash.Common.MethodSignatureRequest.Parser, new[]{ "MethodSignature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QSharpTripleSlash.Common.MethodSignatureResponse), global::QSharpTripleSlash.Common.MethodSignatureResponse.Parser, new[]{ "Name", "ParameterNames", "TypeParameterNames", "HasReturnType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// This is used to determine the type of message being sent over the IPC channel.
  /// </summary>
  public enum MessageType {
    /// <summary>
    /// An unknown / uninitialized message
    /// </summary>
    [pbr::OriginalName("MessageType_Unknown")] Unknown = 0,
    /// <summary>
    /// An error message, used when something went wrong during a request
    /// </summary>
    [pbr::OriginalName("MessageType_Error")] Error = 1,
    /// <summary>
    /// A request to process a method signature
    /// </summary>
    [pbr::OriginalName("MessageType_MethodSignatureRequest")] MethodSignatureRequest = 2,
    /// <summary>
    /// A processed method signature response
    /// </summary>
    [pbr::OriginalName("MessageType_MethodSignatureResponse")] MethodSignatureResponse = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// This is a generic message wrapper, used to contain a message and specify its type
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QSharpTripleSlash.Common.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      type_ = other.type_;
      messageBody_ = other.messageBody_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::QSharpTripleSlash.Common.MessageType type_ = 0;
    /// <summary>
    /// The type of the message that's wrapped by this one
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QSharpTripleSlash.Common.MessageType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "MessageBody" field.</summary>
    public const int MessageBodyFieldNumber = 2;
    private pb::ByteString messageBody_ = pb::ByteString.Empty;
    /// <summary>
    /// The encoded (wrapped) protobuf message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageBody {
      get { return messageBody_; }
      set {
        messageBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MessageBody != other.MessageBody) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MessageBody.Length != 0) hash ^= MessageBody.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (MessageBody.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MessageBody);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MessageBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageBody);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MessageBody.Length != 0) {
        MessageBody = other.MessageBody;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::QSharpTripleSlash.Common.MessageType) input.ReadEnum();
            break;
          }
          case 18: {
            MessageBody = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is an error message, used to describe an error during a request
  /// </summary>
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QSharpTripleSlash.Common.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      errorType_ = other.errorType_;
      message_ = other.message_;
      stackTrace_ = other.stackTrace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "ErrorType" field.</summary>
    public const int ErrorTypeFieldNumber = 1;
    private string errorType_ = "";
    /// <summary>
    /// The .NET type of the exception that caused the error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorType {
      get { return errorType_; }
      set {
        errorType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// The exception message string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StackTrace" field.</summary>
    public const int StackTraceFieldNumber = 3;
    private string stackTrace_ = "";
    /// <summary>
    /// The stack trace from the exception
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StackTrace {
      get { return stackTrace_; }
      set {
        stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorType != other.ErrorType) return false;
      if (Message != other.Message) return false;
      if (StackTrace != other.StackTrace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorType.Length != 0) hash ^= ErrorType.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrorType);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (StackTrace.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StackTrace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorType);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (StackTrace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.ErrorType.Length != 0) {
        ErrorType = other.ErrorType;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.StackTrace.Length != 0) {
        StackTrace = other.StackTrace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ErrorType = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            StackTrace = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is a request message for processing a Q# method signature
  /// </summary>
  public sealed partial class MethodSignatureRequest : pb::IMessage<MethodSignatureRequest> {
    private static readonly pb::MessageParser<MethodSignatureRequest> _parser = new pb::MessageParser<MethodSignatureRequest>(() => new MethodSignatureRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodSignatureRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QSharpTripleSlash.Common.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodSignatureRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodSignatureRequest(MethodSignatureRequest other) : this() {
      methodSignature_ = other.methodSignature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodSignatureRequest Clone() {
      return new MethodSignatureRequest(this);
    }

    /// <summary>Field number for the "MethodSignature" field.</summary>
    public const int MethodSignatureFieldNumber = 1;
    private string methodSignature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodSignature {
      get { return methodSignature_; }
      set {
        methodSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodSignatureRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodSignatureRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MethodSignature != other.MethodSignature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MethodSignature.Length != 0) hash ^= MethodSignature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MethodSignature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MethodSignature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MethodSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodSignature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodSignatureRequest other) {
      if (other == null) {
        return;
      }
      if (other.MethodSignature.Length != 0) {
        MethodSignature = other.MethodSignature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MethodSignature = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message is used to wrap the signature of a function or operation in Q# for documentation
  /// generation. It contains everything needed to autogenerate Markdown for the method.
  /// </summary>
  public sealed partial class MethodSignatureResponse : pb::IMessage<MethodSignatureResponse> {
    private static readonly pb::MessageParser<MethodSignatureResponse> _parser = new pb::MessageParser<MethodSignatureResponse>(() => new MethodSignatureResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodSignatureResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QSharpTripleSlash.Common.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodSignatureResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodSignatureResponse(MethodSignatureResponse other) : this() {
      name_ = other.name_;
      parameterNames_ = other.parameterNames_.Clone();
      typeParameterNames_ = other.typeParameterNames_.Clone();
      hasReturnType_ = other.hasReturnType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodSignatureResponse Clone() {
      return new MethodSignatureResponse(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the method
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ParameterNames" field.</summary>
    public const int ParameterNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_parameterNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> parameterNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The names of each of the parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ParameterNames {
      get { return parameterNames_; }
    }

    /// <summary>Field number for the "TypeParameterNames" field.</summary>
    public const int TypeParameterNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_typeParameterNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> typeParameterNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The names of each of the type parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TypeParameterNames {
      get { return typeParameterNames_; }
    }

    /// <summary>Field number for the "HasReturnType" field.</summary>
    public const int HasReturnTypeFieldNumber = 4;
    private bool hasReturnType_;
    /// <summary>
    /// True if it returns something, false if it returns Unit (so the output section can be ignored).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReturnType {
      get { return hasReturnType_; }
      set {
        hasReturnType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodSignatureResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodSignatureResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!parameterNames_.Equals(other.parameterNames_)) return false;
      if(!typeParameterNames_.Equals(other.typeParameterNames_)) return false;
      if (HasReturnType != other.HasReturnType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= parameterNames_.GetHashCode();
      hash ^= typeParameterNames_.GetHashCode();
      if (HasReturnType != false) hash ^= HasReturnType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      parameterNames_.WriteTo(output, _repeated_parameterNames_codec);
      typeParameterNames_.WriteTo(output, _repeated_typeParameterNames_codec);
      if (HasReturnType != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasReturnType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += parameterNames_.CalculateSize(_repeated_parameterNames_codec);
      size += typeParameterNames_.CalculateSize(_repeated_typeParameterNames_codec);
      if (HasReturnType != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodSignatureResponse other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      parameterNames_.Add(other.parameterNames_);
      typeParameterNames_.Add(other.typeParameterNames_);
      if (other.HasReturnType != false) {
        HasReturnType = other.HasReturnType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            parameterNames_.AddEntriesFrom(input, _repeated_parameterNames_codec);
            break;
          }
          case 26: {
            typeParameterNames_.AddEntriesFrom(input, _repeated_typeParameterNames_codec);
            break;
          }
          case 32: {
            HasReturnType = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
